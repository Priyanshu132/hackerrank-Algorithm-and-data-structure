#include<stdio.h>
#include<stdlib.h>
struct node
{
int info;
struct node *pre;
struct node *next;
}*start=NULL;

int count2=0;
typedef struct node N;

void insert_begining(){
int item;
N *ptr;
printf("Enter the item\n");
scanf("%d",&item);
ptr=(N*)malloc(sizeof(N));
if(ptr==NULL)
{
printf("Overflow\n");
return;
}
ptr->info=item;
if(start==NULL){
ptr->pre=start;
ptr->next=start;
start=ptr;
}
else{
ptr->next=start;
start->pre=ptr;
start=ptr;
start->pre=NULL;
}
printf("The item is inserted at the begining successfully\n");
count2++;
return;
}

void insert_end(){
int item;
N *ptr,*temp;
printf("Enter the item\n");
scanf("%d",&item);
ptr=(N*)malloc(sizeof(N));
if(ptr==NULL)
{
printf("Overflow\n");
return;
}
ptr->info=item;
if(start==NULL){
ptr->pre=start;
ptr->next=start;
start=ptr;
}
else{
ptr->next=NULL;
temp=start;
while(temp->next!=NULL){
temp=temp->next;
}
temp->next=ptr;
ptr->pre=temp;
printf("The item is inserted at the end successfully\n");
}
count2++;
return;
}

void insert_sp_position(){
int item,pos,count=1;
N *ptr,*temp;
printf("Enter the item\n");
scanf("%d",&item);
printf("Enter the Position\n");
scanf("%d",&pos);
if(pos>count2+1){
printf("Enter the valid postion less than %d\n",count+2);
count2--;
return;
}
ptr=(N*)malloc(sizeof(N));
if(ptr==NULL)
{
printf("Overflow\n");
return;
}
ptr->info=item;
if(start==NULL){
ptr->pre=start;
ptr->next=start;
start=ptr;
}
else{
if(pos==1){
ptr->next=start;
start->pre=ptr;
start=ptr;
start->pre=NULL;
}
else{
temp=start;
while(count!=pos-1){
temp=temp->next;
count++;
}
ptr->next=temp->next;
//temp->next->pre=ptr;
temp->next=ptr;
ptr->pre=temp;
}
printf("The item is inserted at the given position successfully\n");
}
count2++;
}

void delete_begining(){
if(start==NULL){
printf("Underflow\n");
return;
}
else{
start=start->next;
printf("The item is deleted successfully\n");
count2--;
}
}

void delete_end(){
N *temp;
if(start==NULL){
printf("Underflow\n");
return;
}
else{
temp=start;
while(temp->next->next!=NULL){
temp=temp->next;
}
temp->next=NULL;
printf("The item is deleted successfully\n");
count2--;
}
}

void delete_sp_position(){
int pos,count=1;
N *temp;
printf("Enter the Position less than %d\n",count2+1);
scanf("%d",&pos);
count2--;
if(start==NULL){
printf("Underflow");
return;
}
else{
if(pos==1){
start=start->next;
}
else{
    temp=start;
while(count!=pos-1){
temp=temp->next;
count++;
}
 if(pos==count2+1){
      temp->next=NULL;   
    }
    else{
temp->next->next->pre=temp->next->pre;
temp->next=temp->next->next;
    }
printf("The item is deleted successfully\n");
}

}
}

void display(){
N *temp;
printf("The items are:\n");
if(start==NULL){
printf("Linked list is empty\n");
return;
}
temp=start;
while(temp!=NULL){
printf("%d ",temp->info);
temp=temp->next;
}
printf("\n");
}


int main()
{
int oper;
do{
printf("Enter the operation\n");
printf("1: Insert the node at the begining\n");
printf("2: Insert the node at the end\n");
printf("3: Insert the node at the specific position\n");
printf("4: Delete the first node\n");
printf("5: Delete the last node\n");
printf("6: Delete the specific position\n");
printf("7: Display linked list\n");
printf("8: Exit\n");
scanf("%d",&oper);
switch(oper)
{
case 1:
insert_begining();
break;
case 2:
insert_end();
break;
case 3:
insert_sp_position();
break;
case 4:
delete_begining();
break;
case 5:
delete_end();
break;
case 6:
delete_sp_position();
break;
case 7:
display();
break;
case 8:
return 0;
}
} while(1);
return 0;
}
