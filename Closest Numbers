import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the closestNumbers function below.
    static int[] closestNumbers(int[] arr) {
        Arrays.sort(arr);
       

        HashMap<Integer, ArrayList<Integer>> map  = new HashMap<>();

       
            int min = Integer.MAX_VALUE;
            for(int i =0;i< arr.length-1;i++){
                int temp = arr[i+1] - arr[i];
                if(min >= temp){
                    min = temp;
                    if(map.containsKey(min)){
                        ArrayList<Integer> l = map.get(min);
                        l.add(arr[i]);
                        l.add(arr[i+1]);
                        map.put(min,l);
                    }
                    else{
                        ArrayList<Integer> l = new ArrayList<>();
                        l.add(arr[i]);
                        l.add(arr[i+1]);
                        map.put(min,l);
                        
                    }
                }
            }
             TreeMap<Integer, ArrayList<Integer>> treemap = new TreeMap<Integer,                         ArrayList<Integer>>(map); 
              ArrayList<Integer> temp_l = treemap.get(treemap.firstKey());
            int[] res = new int[temp_l.size()];
            int k =0;
            for(int i : temp_l){
                res[k] = i;
                k++;
            }

            return res;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrItems[i]);
            arr[i] = arrItem;
        }

        int[] result = closestNumbers(arr);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
