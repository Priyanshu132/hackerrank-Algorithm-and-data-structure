import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the absolutePermutation function below.
    static int[] absolutePermutation(int n, int k) {
          int[] res;
         if(k == 0){
               res = new int[n];
                 for(int i = 0;i< n; i++){
                res[i] = i+1;
            }
            return res;
         }
             if(n % (2 * k) == 0){
                 res = new int[n];
                 for(int i = 0;i< n; i++){
                res[i] = i+1;
            }
                 int temp_i,temp_counter = 0;
                  
                 for(int i = 0;i< n-k; i++){
                   temp_i =  res[i];
                    res[i] = res[i+k];
                    res[i+k] = temp_i;
                    temp_counter++;
                    if(temp_counter == k){
                        i = i + k ;
                        temp_counter = 0;
                    }
                   
            }
             }
             else{
                 res = new int[1];
                 res[0] = -1;
                 
             }
         
        return res;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            String[] nk = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nk[0]);

            int k = Integer.parseInt(nk[1]);

            int[] result = absolutePermutation(n, k);

            for (int i = 0; i < result.length; i++) {
                bufferedWriter.write(String.valueOf(result[i]));

                if (i != result.length - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
