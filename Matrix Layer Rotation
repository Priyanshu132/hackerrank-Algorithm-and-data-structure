import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    
    static void matrixRotation(List<List<Integer>> matrix, int r) {

    int no_of_layers=Math.min(matrix.size(),matrix.get(0).size())/2;
    int rows=matrix.size();
   
    int col=matrix.get(0).size();
   
    for(int j=0;j<no_of_layers;j++){
        
        int[] layers=new int[(2*(col+rows))-4-(8*j)];
        int s=0;
            for(int k=j;k<col-1-j;k++){
            layers[s]=matrix.get(j).get(k);
            s++;
            }

            for(int k=j;k<rows-1-j;k++){
            layers[s]=matrix.get(k).get(col-1-j);
            s++;
            }

            for(int k=col-1-j;k>j;k--)
            {
            layers[s]=matrix.get(rows-1-j).get(k);
            s++;
            }

            for(int k=rows-1-j;k>j;k--)
            {
            layers[s]=matrix.get(k).get(j);
            s++;
            }

            // for(int i=0;i<layers.length;i++)
            // {
            //     System.out.println(layers[i]+"  ");
            // }

            int new_index= r % layers.length;

            for(int k=j;k<col-1-j;k++){
            matrix.get(j).set(k,layers[new_index]);
            new_index++;
            if(new_index==layers.length)
            new_index=0;
            }

            for(int k=j;k<rows-1-j;k++){
            matrix.get(k).set(col-1-j,layers[new_index]);
             new_index++;
            if(new_index==layers.length)
            new_index=0;
            }

            for(int k=col-1-j;k>j;k--)
            {
            matrix.get(rows-1-j).set(k,layers[new_index]);
             new_index++;
            if(new_index==layers.length)
            new_index=0;
            }

            for(int k=rows-1-j;k>j;k--)
            {
            matrix.get(k).set(j,layers[new_index]);
             new_index++;
            if(new_index==layers.length)
            new_index=0;
            }



            
    }
    for(int i=0;i<rows;i++){
        for(int j=0;j<col;j++){
            System.out.print(matrix.get(i).get(j)+" ");
        }
         System.out.println();
    }

    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        String[] mnr = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int m = Integer.parseInt(mnr[0]);

        int n = Integer.parseInt(mnr[1]);

        int r = Integer.parseInt(mnr[2]);

        List<List<Integer>> matrix = new ArrayList<>();

        IntStream.range(0, m).forEach(i -> {
            try {
                matrix.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        matrixRotation(matrix, r);

        bufferedReader.close();
    }
}
