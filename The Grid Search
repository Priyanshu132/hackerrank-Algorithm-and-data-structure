import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the gridSearch function below.
    static String gridSearch(String[] G, String[] P) {
        int g_row=G.length;
        int g_col=G[0].length();
        int p_col=P[0].length();
        for (int i = 0; i < g_row; ++i) {
                for (int j = 0; j < g_col; ++j) {
                    if (G[i].charAt(j) == P[0].charAt(0) && j <= g_col - p_col) {
                        if (isMatch(i, j, G, P)) {
                            return "YES"; 
                          
                        }
                    }
                }
            }
            return "NO";
        }
        static boolean isMatch(int i, int j, String[] G, String[] P) {
        int temp = j;

        for (int r = 0; r < P.length; ++r, ++i) {
            for (int c = 0; c < P[0].length(); ++c, ++j) {
                if (G[i].charAt(j) != P[r].charAt(c)) {
                    return false;
                }
            }
            j = temp;
        }
        return true;
    }



    

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            String[] RC = scanner.nextLine().split(" ");

            int R = Integer.parseInt(RC[0]);

            int C = Integer.parseInt(RC[1]);

            String[] G = new String[R];

            for (int i = 0; i < R; i++) {
                String GItem = scanner.nextLine();
                G[i] = GItem;
            }

            String[] rc = scanner.nextLine().split(" ");

            int r = Integer.parseInt(rc[0]);

            int c = Integer.parseInt(rc[1]);

            String[] P = new String[r];

            for (int i = 0; i < r; i++) {
                String PItem = scanner.nextLine();
                P[i] = PItem;
            }

            String result = gridSearch(G, P);

            bufferedWriter.write(result);
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
