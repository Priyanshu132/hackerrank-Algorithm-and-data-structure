import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'nonDivisibleSubset' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. INTEGER_ARRAY s
     */

    public static int nonDivisibleSubset(int k, List<Integer> s) {
       int j=0,count=0,size=s.size();
       HashMap<Integer, Integer> hm=new HashMap<Integer,Integer>();

        for(int i=0;i<s.size();i++){
            if(hm.containsKey(s.get(i)%k)){
                hm.put(s.get(i)%k,hm.get(s.get(i)%k)+1);a
               
            }
            else{
                hm.put(s.get(i)%k,1);
                
            }
        }
        for(int i=0;i<=k/2;i++){

            if(hm.containsKey(i)){
               
                if(i==0)
                count+=1;
                else{
                    if(hm.containsKey(k-i)){
                        if(i==k-i)
                        count+=1;
                        else
                            count+=Math.max(hm.get(i),hm.get(k-i));
                     }
                      else{
                             count+=hm.get(i);
                           }
                    }   
            }
            else{
                if(hm.containsKey(k-i)){
                    count+=hm.get(k-i);
                }
            }
            
            
        }
         return count;
       
     

     //  return set.size();
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int k = Integer.parseInt(firstMultipleInput[1]);

        List<Integer> s = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.nonDivisibleSubset(k, s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
