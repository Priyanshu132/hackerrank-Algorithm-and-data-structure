import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class StoneDivisionRevisited {
    private static long solve(long sizeOfPile, long[] querySet, Map<Long, Long> dp) {

        if (sizeOfPile == 0 || sizeOfPile == 1) {
            return 0;
        }

        if (dp.containsKey(sizeOfPile)) {
            return dp.get(sizeOfPile);
        }

        long max = 0;

        for (long query : querySet) {
            long sum = 0;
            if (sizeOfPile % query != 0 || sizeOfPile == query) {
                continue;
            }

            long numberOfPiles = sizeOfPile/query;
            sum += solve(query, querySet, dp) * numberOfPiles;
            sum += 1;
            max = Math.max(max, sum);
        }

        dp.put(sizeOfPile, max);

        return max;
    }

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int queries = scn.nextInt();
        for (int i = 0; i < queries; i++) {
            long initialPile = scn.nextLong();
            int sizeOfQuerySet = scn.nextInt();

            long[] querySet = new long[sizeOfQuerySet];

            for (int j = 0; j < sizeOfQuerySet; j++) {
                querySet[j] = scn.nextLong();
            }

            System.out.println(solve(initialPile, querySet, new HashMap<>()));
        }
        scn.close();
    }
}
