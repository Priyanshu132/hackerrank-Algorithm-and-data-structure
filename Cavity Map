import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the cavityMap function below.
    static String[] cavityMap(String[] grid) {

   StringBuilder[] str=new StringBuilder[grid.length];
    for(int i=0;i<grid.length;i++){
            StringBuilder sb=new StringBuilder();
            sb.append(grid[i]);
           str[i]=sb;
        }
            int p=0;
        for(StringBuilder s : str){
            if(p==0){
                p++;
                continue;
            }
            for(int i=1;i<grid.length-1;i++){
                if(s.charAt(i)>str[p-1].charAt(i)&&s.charAt(i)>str[p+1].charAt(i)&&s.charAt(i)>s.charAt(i-1)&&s.charAt(i)>s.charAt(i+1)){
                    s.setCharAt(i, 'X');
                }
            }
            p++;
            if(p==grid.length-1){
                break;
            }
           
        }   
         int i=0;
          for(StringBuilder s : str){
            grid[i] = s.toString();
            i++;
        }
        return grid;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String[] grid = new String[n];

        for (int i = 0; i < n; i++) {
            String gridItem = scanner.nextLine();
            grid[i] = gridItem;
        }

        String[] result = cavityMap(grid);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(result[i]);

            if (i != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
